@article{He:2017:SCM:3072959.3073648,
 author = {He, Yong and Foley, Tim and Hofstee, Teguh and Long, Haomin and Fatahalian, Kayvon},
 title = {Shader Components: Modular and High Performance Shader Development},
 journal = {ACM Trans. Graph.},
 issue_date = {July 2017},
 volume = {36},
 number = {4},
 month = jul,
 year = {2017},
 issn = {0730-0301},
 pages = {100:1--100:11},
 articleno = {100},
 numpages = {11},
 url = {http://doi.acm.org.umasslowell.idm.oclc.org/10.1145/3072959.3073648},
 doi = {10.1145/3072959.3073648},
 acmid = {3073648},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {real-time rendering, shading languages},
 abstract = {Modern game engines seek to balance the conflicting goals of high rendering performance and productive software development. To improve CPU performance, the most recent generation of real-time graphics APIs provide new primitives for performing efficient batch updates to shader parameters. However, modern game engines featuring large shader codebases have struggled to take advantage of these benefits. The problem is that even though shader parameters can be organized into efficient modules bound to the pipeline at various frequencies, modern shading languages lack corresponding primitives to organize shader logic (requiring these parameters) into modules as well. The result is that complex shaders are typically compiled to use a monolithic block of parameters, defeating the design, and performance benefits, of the new parameter binding API. In this paper we propose to resolve this mismatch by introducing shader components, a first-class unit of modularity in a shader program that encapsulates a unit of shader logic and the parameters that must be bound when that logic is in use. We show that by building sophisticated shaders out of components, we can retain essential aspects of performance (static specialization of the shader logic in use and efficient update of parameters at component granularity) while maintaining the modular shader code structure that is desirable in today's high-end game engines.},
 summary = {Modern game engines are required to both provide stunning visuals and high performance.  Creating detailed and varied scenes makes extensive use of shaders.  In additon, authoring these game engines of increasing complexity requires more effective modularization techniques to reduce development costs.  Seemingly at odds, the authors of this paper create asystem when modularity and performance go hand in hand.  By introducing shader components the authors are able to create a system where paramater blocks can be used with object oriented host and GPU side modules.  This is incontrast to current start of the art game engine best practices where monolithic parameter blocks are used and updated in entirety when swapping out shader variants which are pre-compiled with preprocessor defines.  Sinc e the new system allows swapping out only the necessary components, less state needs to change between draw calls and CPU overhead is signficantly reduced.  Synthetic benchmarks show up to a 2X reduction in CPU overhead.},
} 